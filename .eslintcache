[{"D:\\Dev\\react-app\\src\\reportWebVitals.js":"1","D:\\Dev\\react-app\\src\\index.jsx":"2","D:\\Dev\\react-app\\src\\App.jsx":"3","D:\\Dev\\react-app\\src\\Footer.jsx":"4","D:\\Dev\\react-app\\src\\Nav.jsx":"5","D:\\Dev\\react-app\\src\\Logo.jsx":"6"},{"size":375,"mtime":1610485992247,"results":"7","hashOfConfig":"8"},{"size":517,"mtime":1610546104665,"results":"9","hashOfConfig":"8"},{"size":6098,"mtime":1610702660967,"results":"10","hashOfConfig":"8"},{"size":1000,"mtime":1610609440433,"results":"11","hashOfConfig":"8"},{"size":574,"mtime":1610550666877,"results":"12","hashOfConfig":"8"},{"size":180,"mtime":1610608686620,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"fxvw0r",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"D:\\Dev\\react-app\\src\\reportWebVitals.js",[],["29","30"],"D:\\Dev\\react-app\\src\\index.jsx",[],"D:\\Dev\\react-app\\src\\App.jsx",["31"],"import { useState, useEffect } from \"react\" // getting react and state helper function\r\nimport logo from './logo.svg'; // we get a dynamic logo\r\nimport './App.css';\r\nimport Nav from \"./Nav\"\r\nimport Footer from \"./Footer\"\r\n\r\nfunction App() { // component based (App = Main component)\r\n  const [number, setnumber] = useState(0) // getter and setter - using the state hook to create a dynamic variable\r\n  const [name, setname] = useState(\"\") // getter and setter for name variable\r\n  const salutaion = \"Alan\" // undynamic value which doesnt trigger re-renders\r\n  const users = [{ name: \"Pol\", age: \"30\" }, { name: \"Pal\", age: \"31\" }, { name: \"Pil\", age: \"32\" }, { name: \"Pyl\", age: \"33\" }, { name: \"Pxl\", age: \"34\" }]\r\n  const [text, settext] = useState(\"Hello\") // Initialize state with start value\r\n  const [todos, settodos] = useState([]) // Initialize as empty array - bc it will be an aray later\r\n\r\n  useEffect(() => {\r\n    //get \"todos\" from json placeholder\r\n    //put the \"todos\" also in a state variable instead of a local variable\r\n    //render the fetched \"todos\" instead of the static \"todos\"\r\n    fetch(`https://jsonplaceholder.typicode.com/todos`) // simple GET request\r\n      //start then()\r\n      .then(response => {\r\n        return response.json()\r\n      }) //then is awating the promisse. parse the response in JSON.\r\n      .then(json => {\r\n        settodos(json) // setter function of the react state\r\n      }).catch(e => {\r\n        console.log(e)\r\n      })\r\n\r\n  }, []) // This effect just runs on page load\r\n  useEffect(() => {\r\n    console.log(\"I am depending on text\")\r\n  }, [text]) // This useEffect effect is depeiding on the text-state variable\r\n\r\n  // filter users fefore rendering it - if there is a search string\r\n  const filteredUsers = users.filter(user => user.name.includes(text));\r\n  return ( // JSX = react html template style virtual DOM\r\n    <div className=\"App\">\r\n      <Nav myname={salutaion} />{/* pass props down to child component (Nav) **/}\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />{/* display dynamic image source **/}\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          onClick={() => {\r\n            setnumber(number + 1)\r\n            fetch(`https://jsonplaceholder.typicode.com/users/${number}`) // simple GET request\r\n              //start then()\r\n              .then(response => {\r\n                return response.json()\r\n              }) //then is awating the promisse. parse the response in JSON.\r\n              .then(json => {\r\n                setname(json.username) // setter function of the react state\r\n              }).catch(e => {\r\n                console.log(e)\r\n              })\r\n          }} //increment the number on click on the link\r\n          //href=\"https://reactjs.org\"\r\n          //target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Display thw dainamic value {number} \r\n        </a>\r\n        name : <code>{name}</code>\r\n      </header>\r\n      <main>\r\n        <div>\r\n          <label htmlhtmlFor=\"search\">Search</label>\r\n          <input // UNCONTROLLED COMPONENT - it just writes to the state, but has no value from the state\r\n            id=\"search\" // \r\n            onChange={(event => { // listen for onchange event in react style\r\n              settext(event.target.value) // using the setter from the parent component\r\n            })}\r\n          />\r\n\r\n        </div>\r\n        <div>\r\n          <label htmlhtmlFor=\"search\">Test bind react contorlled components</label>\r\n          <input // CONTROLLED REACT COMPONENT\r\n            id=\"test\"\r\n            value={text} // this makes it to a controlled component - instantly after state change read that state variable\r\n            onChange={(event => { // this makes it to a controlled component -  listen for onchange event in react style\r\n              settext(event.target.value) // set the state on change event\r\n            })}\r\n          />\r\n\r\n        </div>\r\n        <div>\r\n          Localtext is: {text} {/*the getter from the parent component **/}\r\n        </div>\r\n\r\n\r\n        {/* react loops need a unique key to be more performant*/}\r\n        {users.map(user => (\r\n          <div key={user.name}>{user.name}</div>\r\n        ))}\r\n\r\n        conditional rendering\r\n        <div className=\"container\">\r\n          {todos.map((localTodo, index) => ( // state list which is trigger re-render\r\n            <div key={index}>\r\n              {/* key is needed for react to run loop operations more performant. Use index or other unique value */}\r\n              <div className={\"form-check\"}>\r\n                <input\r\n                  className=\"form-check-input\" // bootstrap stuff \r\n                  type=\"checkbox\"\r\n                  value=\"\"\r\n                  id=\"flexCheckDefault\"\r\n                  defaultChecked={localTodo.completed ? true : false} // check if the todo in the state is completed and render the checkbox\r\n                  onChange={(event => { // WHEN CHECKBOX IS RECEIVING ONCHANGE EVENT\r\n                    let index = todos.findIndex(todoToFind => todoToFind.id === localTodo.id)// find the position of the clicked checkbox in the list  - because we want to alter the list (its our state)\r\n                    localTodo.completed = !localTodo.completed // flip the value in the js variable in the Changed element (not the element in the original list yet)\r\n                    todos[index] = localTodo // move the updated onchange element in the original list\r\n                    settodos(todos) // upodate the state with the new list \r\n                  })}\r\n                />\r\n                <label className=\"form-check-label\" htmlFor=\"flexCheckDefault\">\r\n                  {localTodo.title}\r\n                </label>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </main>\r\n\r\n      <Footer\r\n        users={filteredUsers}\r\n        text={text}\r\n        settext={settext}\r\n        logo={logo}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\Dev\\react-app\\src\\Footer.jsx",[],"D:\\Dev\\react-app\\src\\Nav.jsx",["32","33"],"import \"./Nav.css\";\r\nimport { useState, useEffect } from \"react\"\r\nfunction Nav(props) { // component\r\n  // 1 define state getter and setter\r\n  // get time\r\n  // set current time on interval\r\n  // print time in template\r\n\r\n  const [time, settime] = useState(0)\r\n  /*useEffect(() =>{\r\n    setInterval(() => {\r\n\r\n    settime(Date.now())\r\n    console.log(Date.now());\r\n  }, 1000);\r\n}, [])*/\r\n\r\n  return ( // JSX = react html template style virtual DOM\r\n    <nav>\r\n      Nav - i am {props.myname} - and thats the time: \r\n      {time}\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","D:\\Dev\\react-app\\src\\Logo.jsx",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":45,"column":9,"nodeType":"40","endLine":63,"endColumn":10},{"ruleId":"41","severity":1,"message":"42","line":2,"column":20,"nodeType":"43","messageId":"44","endLine":2,"endColumn":29},{"ruleId":"41","severity":1,"message":"45","line":9,"column":16,"nodeType":"43","messageId":"44","endLine":9,"endColumn":23},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'settime' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]